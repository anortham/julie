name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v0.5.0

permissions:
  contents: write  # Required for creating releases

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows (DirectML - works with NVIDIA, AMD, Intel GPUs)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: julie-server.exe

          # macOS Intel (CoreML)
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: julie-server

          # macOS Apple Silicon (CoreML + Neural Engine)
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: julie-server

          # Linux (CUDA + TensorRT)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: julie-server

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

      - name: Create archive
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ARCHIVE="julie-v${VERSION}-${{ matrix.target }}.zip"
            7z a "${ARCHIVE}" "./target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
          else
            ARCHIVE="julie-v${VERSION}-${{ matrix.target }}.tar.gz"
            tar -czf "${ARCHIVE}" -C target/${{ matrix.target }}/release ${{ matrix.binary_name }}
          fi
          echo "ARCHIVE=${ARCHIVE}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE }}
          path: ${{ env.ARCHIVE }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release with gh CLI
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Create release notes
          cat > release-notes.md << 'EOF'
          ## Julie v${{ steps.version.outputs.version }}

          Cross-platform code intelligence server for AI coding agents.

          ### Installation

          Download the binary for your platform below, extract, and add to your PATH.

          ### Platform Support
          - **Windows** (x86_64): DirectML GPU acceleration (NVIDIA, AMD, Intel)
          - **macOS Intel** (x86_64): CoreML acceleration
          - **macOS Apple Silicon** (aarch64): CoreML + Neural Engine acceleration
          - **Linux** (x86_64): CUDA + TensorRT GPU acceleration

          ### Quick Start
          ```bash
          # Extract the archive for your platform
          # Add julie-server to your PATH
          # Configure your MCP client to use julie-server
          ```

          See [README.md](https://github.com/${{ github.repository }}) for full documentation.

          ### Highlights
          - 🚀 25 language extractors with 100% Miller parity
          - ⚡ CASCADE architecture (SQLite FTS5 → HNSW Semantic)
          - 🛡️ Comprehensive safety mechanisms (all tools default to preview mode)
          - 🎯 GPU acceleration on all platforms
          - ✅ 1,150 tests passing
          EOF

          # Create release
          gh release create "v${VERSION}" \
            --title "Julie v${VERSION}" \
            --notes-file release-notes.md

      - name: Upload Release Assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Upload all artifacts
          cd artifacts
          for dir in */; do
            for file in "$dir"*; do
              if [ -f "$file" ]; then
                echo "Uploading $(basename "$file")..."
                gh release upload "v${VERSION}" "$file" --clobber
              fi
            done
          done

      - name: Verify Release
        run: |
          echo "✅ Release v${{ steps.version.outputs.version }} created successfully"
          echo "Binaries built for:"
          echo "  - Windows (x86_64-pc-windows-msvc) - DirectML"
          echo "  - macOS Intel (x86_64-apple-darwin) - CoreML"
          echo "  - macOS Apple Silicon (aarch64-apple-darwin) - CoreML + Neural Engine"
          echo "  - Linux (x86_64-unknown-linux-gnu) - CUDA + TensorRT"
          echo ""
          echo "View release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"
