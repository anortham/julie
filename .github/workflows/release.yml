name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v0.5.0

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Julie v${{ steps.get_version.outputs.version }}
          body: |
            ## Julie v${{ steps.get_version.outputs.version }}

            Cross-platform code intelligence server for AI coding agents.

            ### Installation

            Download the binary for your platform:
            - **Windows**: `julie-v${{ steps.get_version.outputs.version }}-x86_64-pc-windows-msvc.zip`
            - **macOS**: `julie-v${{ steps.get_version.outputs.version }}-x86_64-apple-darwin.tar.gz`
            - **Linux**: `julie-v${{ steps.get_version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz`

            Extract and add to your PATH.

            ### GPU Acceleration
            - **Windows**: DirectML (NVIDIA, AMD, Intel GPUs)
            - **macOS**: CoreML (Apple Silicon Neural Engine)
            - **Linux**: CUDA + TensorRT (NVIDIA GPUs)

            See [README.md](https://github.com/${{ github.repository }}) for configuration.
          draft: false
          prerelease: false

  build:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows (DirectML - works with NVIDIA, AMD, Intel GPUs)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: julie-server.exe
            archive_name: julie-v${{ needs.create-release.outputs.version }}-x86_64-pc-windows-msvc.zip

          # macOS Intel (CoreML)
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: julie-server
            archive_name: julie-v${{ needs.create-release.outputs.version }}-x86_64-apple-darwin.tar.gz

          # macOS Apple Silicon (CoreML + Neural Engine)
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: julie-server
            archive_name: julie-v${{ needs.create-release.outputs.version }}-aarch64-apple-darwin.tar.gz

          # Linux (CUDA + TensorRT)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: julie-server
            archive_name: julie-v${{ needs.create-release.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $binary = "target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
          Compress-Archive -Path $binary -DestinationPath ${{ matrix.archive_name }}

      - name: Create archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          tar -czf ${{ matrix.archive_name }} -C target/${{ matrix.target }}/release ${{ matrix.binary_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.archive_name }}
          asset_name: ${{ matrix.archive_name }}
          asset_content_type: application/octet-stream

  verify-release:
    name: Verify Release Artifacts
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Check all artifacts uploaded
        run: |
          echo "âœ… Release v${{ needs.create-release.outputs.version }} created successfully"
          echo "Binaries built for:"
          echo "  - Windows (DirectML)"
          echo "  - macOS Intel (CoreML)"
          echo "  - macOS Apple Silicon (CoreML + Neural Engine)"
          echo "  - Linux (CUDA + TensorRT)"
