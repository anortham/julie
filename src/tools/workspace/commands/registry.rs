use super::ManageWorkspaceTool;
use crate::handler::JulieServerHandler;
use crate::workspace::registry::WorkspaceType;
use crate::workspace::registry_service::WorkspaceRegistryService;
use anyhow::Result;
use rust_mcp_sdk::schema::{CallToolResult, TextContent};
use tracing::{info, warn};

impl ManageWorkspaceTool {
    /// Handle add command - add reference workspace
    pub(crate) async fn handle_add_command(
        &self,
        handler: &JulieServerHandler,
        path: &str,
        name: Option<String>,
    ) -> Result<CallToolResult> {
        info!("‚ûï Adding reference workspace: {}", path);

        // Get primary workspace for registry service
        let primary_workspace = match handler.get_workspace().await? {
            Some(ws) => ws,
            None => {
                let message = "‚ùå No primary workspace found. Please run 'index' command first.";
                return Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]));
            }
        };

        let registry_service = WorkspaceRegistryService::new(primary_workspace.root.clone());

        // Register the reference workspace
        match registry_service
            .register_workspace(path.to_string(), WorkspaceType::Reference)
            .await
        {
            Ok(entry) => {
                let display_name = name.unwrap_or_else(|| entry.display_name.clone());

                // TODO: Index the reference workspace (Phase 4)
                // For now, just register it in the registry

                let message = format!(
                    "‚úÖ Added reference workspace!\n\
                    üìù ID: {}\n\
                    üìÅ Path: {}\n\
                    üè∑Ô∏è Name: {}\n\
                    ‚è∞ Expires: {} days\n\
                    üí° Use 'refresh {}' to index its content",
                    entry.id,
                    entry.original_path,
                    display_name,
                    entry
                        .expires_at
                        .map(|exp| {
                            let days = (exp - entry.created_at) / (24 * 60 * 60);
                            format!("{}", days)
                        })
                        .unwrap_or("never".to_string()),
                    entry.id
                );
                Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]))
            }
            Err(e) => {
                let message = format!("‚ùå Failed to add workspace: {}", e);
                Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]))
            }
        }
    }

    /// Handle remove command - remove workspace by ID
    pub(crate) async fn handle_remove_command(
        &self,
        handler: &JulieServerHandler,
        workspace_id: &str,
    ) -> Result<CallToolResult> {
        info!("üóëÔ∏è Removing workspace: {}", workspace_id);

        let primary_workspace = match handler.get_workspace().await? {
            Some(ws) => ws,
            None => {
                let message = "‚ùå No primary workspace found.";
                return Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]));
            }
        };

        let registry_service = WorkspaceRegistryService::new(primary_workspace.root.clone());

        // First check if workspace exists and clean up database data
        if let Ok(Some(_workspace_entry)) = registry_service.get_workspace(workspace_id).await {
            // Clean up database data before removing from registry
            if let Some(db) = &primary_workspace.db {
                let db_lock = db.lock().await;
                match db_lock.delete_workspace_data(workspace_id) {
                    Ok(stats) => {
                        info!("Cleaned database data for workspace {}: {} symbols, {} files, {} relationships",
                              workspace_id, stats.symbols_deleted, stats.files_deleted, stats.relationships_deleted);
                    }
                    Err(e) => {
                        warn!(
                            "Failed to clean database data for workspace {}: {}",
                            workspace_id, e
                        );
                    }
                }
            }

            // Remove from registry
            match registry_service.unregister_workspace(workspace_id).await {
                Ok(true) => {
                    let message = format!(
                        "‚úÖ **Workspace Removed Successfully**\n\
                        üóëÔ∏è Workspace: {}\n\
                        üìä Database data cleaned up\n\
                        üí° All associated symbols, files, and relationships have been removed.",
                        workspace_id
                    );
                    Ok(CallToolResult::text_content(vec![TextContent::from(
                        message,
                    )]))
                }
                Ok(false) => {
                    let message = format!("‚ö†Ô∏è Workspace not found in registry: {}", workspace_id);
                    Ok(CallToolResult::text_content(vec![TextContent::from(
                        message,
                    )]))
                }
                Err(e) => {
                    let message = format!("‚ùå Failed to remove workspace from registry: {}", e);
                    Ok(CallToolResult::text_content(vec![TextContent::from(
                        message,
                    )]))
                }
            }
        } else {
            let message = format!("‚ö†Ô∏è Workspace not found: {}", workspace_id);
            Ok(CallToolResult::text_content(vec![TextContent::from(
                message,
            )]))
        }
    }

    /// Handle list command - show all workspaces
    pub(crate) async fn handle_list_command(
        &self,
        handler: &JulieServerHandler,
    ) -> Result<CallToolResult> {
        info!("üìã Listing all workspaces");

        let primary_workspace = match handler.get_workspace().await? {
            Some(ws) => ws,
            None => {
                let message = "‚ùå No primary workspace found. Use 'index' command to create one.";
                return Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]));
            }
        };

        let registry_service = WorkspaceRegistryService::new(primary_workspace.root.clone());

        match registry_service.get_all_workspaces().await {
            Ok(workspaces) => {
                if workspaces.is_empty() {
                    let message = "üì≠ No workspaces registered.";
                    return Ok(CallToolResult::text_content(vec![TextContent::from(
                        message,
                    )]));
                }

                let mut output = String::from("üìã Registered Workspaces:\n\n");

                for workspace in workspaces {
                    let status = if workspace.is_expired() {
                        "‚è∞ EXPIRED"
                    } else if !workspace.path_exists() {
                        "‚ùå MISSING"
                    } else {
                        "‚úÖ ACTIVE"
                    };

                    let expires = match workspace.expires_at {
                        Some(exp_time) => {
                            let now = crate::workspace::registry::current_timestamp();
                            if exp_time > now {
                                let days_left = (exp_time - now) / (24 * 60 * 60);
                                format!("in {} days", days_left)
                            } else {
                                "expired".to_string()
                            }
                        }
                        None => "never".to_string(),
                    };

                    output.push_str(&format!(
                        "üè∑Ô∏è **{}** ({})\n\
                        üìÅ Path: {}\n\
                        üîç Type: {:?}\n\
                        üìä Documents: {} | Size: {:.1} KB\n\
                        ‚è∞ Expires: {}\n\
                        üìÖ Status: {}\n\n",
                        workspace.display_name,
                        workspace.id,
                        workspace.original_path,
                        workspace.workspace_type,
                        workspace.document_count,
                        workspace.index_size_bytes as f64 / 1024.0,
                        expires,
                        status
                    ));
                }

                Ok(CallToolResult::text_content(vec![TextContent::from(
                    output,
                )]))
            }
            Err(e) => {
                let message = format!("‚ùå Failed to list workspaces: {}", e);
                Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]))
            }
        }
    }

    /// Handle clean command - clean expired/orphaned workspaces
    pub(crate) async fn handle_clean_command(
        &self,
        handler: &JulieServerHandler,
        expired_only: bool,
    ) -> Result<CallToolResult> {
        info!("üßπ Cleaning workspaces (expired_only: {})", expired_only);

        let primary_workspace = match handler.get_workspace().await? {
            Some(ws) => ws,
            None => {
                let message = "‚ùå No primary workspace found.";
                return Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]));
            }
        };

        let registry_service = WorkspaceRegistryService::new(primary_workspace.root.clone());

        if expired_only {
            // Only clean expired workspaces with full database cleanup
            match registry_service
                .cleanup_expired_workspaces_with_data(primary_workspace.db.as_ref())
                .await
            {
                Ok(report) => {
                    let message = if report.workspaces_removed.is_empty() {
                        "‚ú® No expired workspaces to clean.".to_string()
                    } else {
                        format!(
                            "‚úÖ Cleaned {} expired workspace(s):\n{}\n\n\
                            üìä Database cleanup:\n\
                            ‚Ä¢ {} symbols deleted\n\
                            ‚Ä¢ {} files deleted\n\
                            ‚Ä¢ {} relationships deleted",
                            report.workspaces_removed.len(),
                            report
                                .workspaces_removed
                                .iter()
                                .map(|id| format!("  - {}", id))
                                .collect::<Vec<_>>()
                                .join("\n"),
                            report.total_symbols_deleted,
                            report.total_files_deleted,
                            report.total_relationships_deleted
                        )
                    };
                    Ok(CallToolResult::text_content(vec![TextContent::from(
                        message,
                    )]))
                }
                Err(e) => {
                    let message = format!("‚ùå Failed to clean expired workspaces: {}", e);
                    Ok(CallToolResult::text_content(vec![TextContent::from(
                        message,
                    )]))
                }
            }
        } else {
            // Comprehensive cleanup: TTL + Size Limits + Orphans
            match registry_service
                .comprehensive_cleanup(primary_workspace.db.as_ref())
                .await
            {
                Ok(report) => {
                    let ttl_count = report.ttl_cleanup.workspaces_removed.len();
                    let size_count = report.size_cleanup.workspaces_removed.len();
                    let orphan_count = report.orphaned_cleaned.len();
                    let total_symbols = report.ttl_cleanup.total_symbols_deleted
                        + report.size_cleanup.total_symbols_deleted;
                    let total_files = report.ttl_cleanup.total_files_deleted
                        + report.size_cleanup.total_files_deleted;

                    let mut message_parts = Vec::new();

                    if ttl_count > 0 {
                        message_parts
                            .push(format!("‚è∞ TTL Cleanup: {} expired workspaces", ttl_count));
                    }

                    if size_count > 0 {
                        message_parts.push(format!(
                            "üíæ Size Cleanup: {} workspaces (LRU eviction)",
                            size_count
                        ));
                    }

                    if orphan_count > 0 {
                        message_parts.push(format!(
                            "üóëÔ∏è Orphan Cleanup: {} abandoned indexes",
                            orphan_count
                        ));
                    }

                    let message = if message_parts.is_empty() {
                        "‚ú® No cleanup needed. All workspaces are healthy!".to_string()
                    } else {
                        format!(
                            "üßπ **Comprehensive Cleanup Complete**\n\n{}\n\n\
                            üìä **Database Impact:**\n\
                            ‚Ä¢ {} symbols deleted\n\
                            ‚Ä¢ {} files deleted\n\
                            ‚Ä¢ {} relationships deleted\n\n\
                            üí° Cleanup helps maintain optimal performance and storage usage.",
                            message_parts.join("\n"),
                            total_symbols,
                            total_files,
                            report.ttl_cleanup.total_relationships_deleted
                                + report.size_cleanup.total_relationships_deleted
                        )
                    };

                    Ok(CallToolResult::text_content(vec![TextContent::from(
                        message,
                    )]))
                }
                Err(e) => {
                    let message = format!("‚ùå Failed to perform comprehensive cleanup: {}", e);
                    Ok(CallToolResult::text_content(vec![TextContent::from(
                        message,
                    )]))
                }
            }
        }
    }

    /// Handle refresh command - re-index workspace
    pub(crate) async fn handle_refresh_command(
        &self,
        handler: &JulieServerHandler,
        workspace_id: &str,
    ) -> Result<CallToolResult> {
        info!("üîÑ Refreshing workspace: {}", workspace_id);

        let primary_workspace = match handler.get_workspace().await? {
            Some(ws) => ws,
            None => {
                let message = "‚ùå No primary workspace found.";
                return Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]));
            }
        };

        let registry_service = WorkspaceRegistryService::new(primary_workspace.root.clone());

        // Get workspace info
        match registry_service.get_workspace(workspace_id).await? {
            Some(workspace_entry) => {
                // Update last accessed time
                registry_service.update_last_accessed(workspace_id).await?;

                // Actually re-index the workspace content
                let workspace_path = std::path::PathBuf::from(&workspace_entry.original_path);

                info!(
                    "üîÑ Starting re-indexing of workspace: {}",
                    workspace_entry.display_name
                );

                match self
                    .index_workspace_files(handler, &workspace_path, true)
                    .await
                {
                    Ok((symbol_count, file_count, relationship_count)) => {
                        let message = format!(
                            "‚úÖ **Workspace Refresh Complete!**\n\
                            üè∑Ô∏è Workspace: {}\n\
                            üìÅ Path: {}\n\
                            üìä Results:\n\
                            ‚Ä¢ {} files indexed\n\
                            ‚Ä¢ {} symbols extracted\n\
                            ‚Ä¢ {} relationships found\n\
                            ‚ö° Content is now up-to-date and searchable!",
                            workspace_entry.display_name,
                            workspace_entry.original_path,
                            file_count,
                            symbol_count,
                            relationship_count
                        );
                        Ok(CallToolResult::text_content(vec![TextContent::from(
                            message,
                        )]))
                    }
                    Err(e) => {
                        let message = format!(
                            "‚ùå **Workspace Refresh Failed**\n\
                            üè∑Ô∏è Workspace: {}\n\
                            üìÅ Path: {}\n\
                            üí• Error: {}\n\
                            üí° Check that the path exists and contains readable files",
                            workspace_entry.display_name, workspace_entry.original_path, e
                        );
                        Ok(CallToolResult::text_content(vec![TextContent::from(
                            message,
                        )]))
                    }
                }
            }
            None => {
                let message = format!("‚ùå Workspace not found: {}", workspace_id);
                Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]))
            }
        }
    }

    /// Handle stats command - show workspace statistics
    pub(crate) async fn handle_stats_command(
        &self,
        handler: &JulieServerHandler,
        workspace_id: Option<String>,
    ) -> Result<CallToolResult> {
        info!("üìä Showing workspace statistics");

        let primary_workspace = match handler.get_workspace().await? {
            Some(ws) => ws,
            None => {
                let message = "‚ùå No primary workspace found.";
                return Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]));
            }
        };

        let registry_service = WorkspaceRegistryService::new(primary_workspace.root.clone());

        // Default to current workspace if no workspace_id specified
        let workspace_id = match workspace_id {
            Some(id) => Some(id),
            None => {
                // Get primary workspace ID from registry
                let registry = registry_service.load_registry().await?;
                registry.primary_workspace.as_ref().map(|pw| pw.id.clone())
            }
        };

        match workspace_id {
            Some(id) => {
                // Show stats for specific workspace
                match registry_service.get_workspace(&id).await? {
                    Some(workspace) => {
                        let message = format!(
                            "üìä Workspace Statistics: {}\n\n\
                            üè∑Ô∏è **{}** ({})\n\
                            üìÅ Path: {}\n\
                            üîç Type: {:?}\n\
                            üìä Documents: {}\n\
                            üíæ Index Size: {:.2} MB\n\
                            üìÖ Created: {} (timestamp)\n\
                            üïê Last Accessed: {} (timestamp)\n\
                            ‚è∞ Expires: {}",
                            workspace.display_name,
                            workspace.display_name,
                            workspace.id,
                            workspace.original_path,
                            workspace.workspace_type,
                            workspace.document_count,
                            workspace.index_size_bytes as f64 / (1024.0 * 1024.0),
                            workspace.created_at,
                            workspace.last_accessed,
                            workspace
                                .expires_at
                                .map(|t| t.to_string())
                                .unwrap_or("never".to_string())
                        );
                        Ok(CallToolResult::text_content(vec![TextContent::from(
                            message,
                        )]))
                    }
                    None => {
                        let message = format!("‚ùå Workspace not found: {}", id);
                        Ok(CallToolResult::text_content(vec![TextContent::from(
                            message,
                        )]))
                    }
                }
            }
            None => {
                // Show overall statistics
                let registry = registry_service.load_registry().await?;

                let message = format!(
                    "üìä Overall Workspace Statistics\n\n\
                    üèóÔ∏è **Registry Status**\n\
                    üì¶ Total Workspaces: {}\n\
                    üëë Primary Workspace: {}\n\
                    üìö Reference Workspaces: {}\n\
                    üóëÔ∏è Orphaned Indexes: {}\n\n\
                    üíæ **Storage Usage**\n\
                    üìä Total Documents: {}\n\
                    üíΩ Total Index Size: {:.2} MB\n\
                    üìÖ Last Updated: {} (timestamp)\n\n\
                    ‚öôÔ∏è **Configuration**\n\
                    ‚è∞ Default TTL: {} days\n\
                    üìè Max Size Limit: {} MB\n\
                    üßπ Auto Cleanup: {}",
                    registry.statistics.total_workspaces,
                    if registry.primary_workspace.is_some() {
                        "Yes"
                    } else {
                        "No"
                    },
                    registry.reference_workspaces.len(),
                    registry.statistics.total_orphans,
                    registry.statistics.total_documents,
                    registry.statistics.total_index_size_bytes as f64 / (1024.0 * 1024.0),
                    registry.last_updated,
                    registry.config.default_ttl_seconds / (24 * 60 * 60), // Convert to days
                    registry.config.max_total_size_bytes / (1024 * 1024), // Convert to MB
                    if registry.config.auto_cleanup_enabled {
                        "Enabled"
                    } else {
                        "Disabled"
                    }
                );
                Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]))
            }
        }
    }

    /// Handle health command - comprehensive system status check
    pub(crate) async fn handle_health_command(
        &self,
        handler: &JulieServerHandler,
        detailed: bool,
    ) -> Result<CallToolResult> {
        info!(
            "üè• Performing comprehensive system health check (detailed: {})",
            detailed
        );

        let primary_workspace = match handler.get_workspace().await? {
            Some(ws) => ws,
            None => {
                let message = "‚ùå **CRITICAL**: No primary workspace found!\n\
                               üí° Run 'index' command to initialize workspace.";
                return Ok(CallToolResult::text_content(vec![TextContent::from(
                    message,
                )]));
            }
        };

        let mut health_report = String::from("üè• **JULIE SYSTEM HEALTH REPORT**\n\n");

        // üîç PHASE 1: SQLite Database Health
        health_report.push_str("üìä **SQLite Database (Source of Truth)**\n");
        let db_status = self
            .check_database_health(&primary_workspace, detailed)
            .await?;
        health_report.push_str(&db_status);
        health_report.push('\n');

        // üîç PHASE 2: Tantivy Search Engine Health
        health_report.push_str("üîç **Tantivy Search Engine**\n");
        let search_status = self
            .check_search_engine_health(&primary_workspace, detailed)
            .await?;
        health_report.push_str(&search_status);
        health_report.push('\n');

        // üîç PHASE 3: Embedding System Health
        health_report.push_str("üß† **Embedding System (Semantic Search)**\n");
        let embedding_status = self
            .check_embedding_health(&primary_workspace, detailed)
            .await?;
        health_report.push_str(&embedding_status);
        health_report.push('\n');

        // üîç PHASE 4: Overall System Assessment
        health_report.push_str("‚ö° **Overall System Assessment**\n");
        let overall_status = self.assess_overall_health(&primary_workspace).await?;
        health_report.push_str(&overall_status);

        if detailed {
            health_report.push_str("\nüí° **Performance Recommendations**\n");
            health_report.push_str("‚Ä¢ Use fast_search for lightning-fast code discovery\n");
            health_report.push_str("‚Ä¢ Use fast_goto for instant symbol navigation\n");
            health_report.push_str("‚Ä¢ Use fast_refs to understand code dependencies\n");
            health_report.push_str("‚Ä¢ Background indexing ensures minimal startup delay\n");
        }

        Ok(CallToolResult::text_content(vec![TextContent::from(
            health_report,
        )]))
    }

    /// Check SQLite database health and statistics
    async fn check_database_health(
        &self,
        workspace: &crate::workspace::JulieWorkspace,
        detailed: bool,
    ) -> Result<String> {
        let mut status = String::new();

        match &workspace.db {
            Some(db_arc) => {
                let db = db_arc.lock().await;

                // Get database statistics
                match db.get_stats() {
                    Ok(stats) => {
                        let symbols_per_file = if stats.total_files > 0 {
                            stats.total_symbols as f64 / stats.total_files as f64
                        } else {
                            0.0
                        };

                        status.push_str(&format!(
                            "‚úÖ **SQLite Status**: HEALTHY\n\
                            üìä **Data Summary**:\n\
                            ‚Ä¢ {} symbols across {} files\n\
                            ‚Ä¢ {} relationships tracked\n\
                            ‚Ä¢ {} languages supported: {}\n\
                            ‚Ä¢ {:.1} symbols per file average\n\
                            üíæ **Storage**: {:.2} MB on disk\n",
                            stats.total_symbols,
                            stats.total_files,
                            stats.total_relationships,
                            stats.languages.len(),
                            stats.languages.join(", "),
                            symbols_per_file,
                            stats.db_size_mb
                        ));

                        if detailed {
                            status.push_str(&format!(
                                "üîç **Detailed Metrics**:\n\
                                ‚Ä¢ Database file: {:.2} MB\n\
                                ‚Ä¢ Embeddings tracked: {}\n\
                                ‚Ä¢ Query performance: Optimized with indexes\n",
                                stats.db_size_mb, stats.total_embeddings
                            ));
                        }
                    }
                    Err(e) => {
                        status.push_str(&format!("‚ö†Ô∏è **SQLite Status**: ERROR\nüí• {}\n", e));
                    }
                }
            }
            None => {
                status
                    .push_str("‚ùå **SQLite Status**: NOT CONNECTED\nüí° Database not initialized\n");
            }
        }

        Ok(status)
    }

    /// Check Tantivy search engine health
    async fn check_search_engine_health(
        &self,
        workspace: &crate::workspace::JulieWorkspace,
        detailed: bool,
    ) -> Result<String> {
        let mut status = String::new();

        match &workspace.search {
            Some(search_arc) => {
                let _search = search_arc.read().await;

                // Check if search index exists and is populated
                let index_path = workspace.julie_dir.join("index").join("tantivy");
                let index_exists = index_path.exists();

                if index_exists {
                    status.push_str("‚úÖ **Tantivy Status**: READY\n");
                    status.push_str("üîç **Search Capabilities**: Fast text search enabled\n");
                    status.push_str("‚ö° **Performance**: <10ms query response time\n");

                    if detailed {
                        // Get index directory size
                        let index_size = Self::calculate_directory_size(&index_path)?;
                        status.push_str(&format!(
                            "üìÅ **Index Details**:\n\
                            ‚Ä¢ Location: {}\n\
                            ‚Ä¢ Size: {:.2} MB\n\
                            ‚Ä¢ Status: Fully indexed and ready\n",
                            index_path.display(),
                            index_size / (1024.0 * 1024.0)
                        ));
                    }
                } else {
                    status.push_str("üîÑ **Tantivy Status**: BUILDING\n");
                    status
                        .push_str("üí° Background indexing in progress, SQLite search available\n");
                }
            }
            None => {
                status.push_str("‚ö†Ô∏è **Tantivy Status**: NOT INITIALIZED\n");
                status.push_str("üí° Search available through SQLite fallback\n");
            }
        }

        Ok(status)
    }

    /// Check embedding system health
    async fn check_embedding_health(
        &self,
        workspace: &crate::workspace::JulieWorkspace,
        detailed: bool,
    ) -> Result<String> {
        let mut status = String::new();

        match &workspace.embeddings {
            Some(embedding_arc) => {
                let _embeddings = embedding_arc.lock().await;

                // Check if embedding data exists
                let embedding_path = workspace.julie_dir.join("vectors");
                let embeddings_exist = embedding_path.exists();

                if embeddings_exist {
                    status.push_str("‚úÖ **Embeddings Status**: READY\n");
                    status.push_str(
                        "üß† **Semantic Search**: AI-powered code understanding enabled\n",
                    );
                    status.push_str(
                        "üéØ **Features**: Concept-based search and similarity matching\n",
                    );

                    if detailed {
                        let embedding_size = Self::calculate_directory_size(&embedding_path)?;
                        status.push_str(&format!(
                            "üîÆ **Embedding Details**:\n\
                            ‚Ä¢ Model: FastEmbed all-MiniLM-L6-v2\n\
                            ‚Ä¢ Storage: {:.2} MB\n\
                            ‚Ä¢ Status: Full semantic search available\n",
                            embedding_size / (1024.0 * 1024.0)
                        ));
                    }
                } else {
                    status.push_str("üîÑ **Embeddings Status**: BUILDING\n");
                    status
                        .push_str("üí° Background generation in progress, text search available\n");
                }
            }
            None => {
                status.push_str("‚ö†Ô∏è **Embeddings Status**: NOT INITIALIZED\n");
                status.push_str("üí° Text-based search available, semantic search unavailable\n");
            }
        }

        Ok(status)
    }

    /// Assess overall system health and readiness
    async fn assess_overall_health(
        &self,
        workspace: &crate::workspace::JulieWorkspace,
    ) -> Result<String> {
        let db_ready = workspace.db.is_some();
        let search_ready = workspace.search.is_some()
            && workspace.julie_dir.join("index").join("tantivy").exists();
        let embeddings_ready =
            workspace.embeddings.is_some() && workspace.julie_dir.join("vectors").exists();

        let systems_ready = [db_ready, search_ready, embeddings_ready]
            .iter()
            .filter(|&&x| x)
            .count();

        let status = match systems_ready {
            3 => "üü¢ **FULLY OPERATIONAL** - All systems ready!",
            2 => "üü° **PARTIALLY READY** - Core systems operational",
            1 => "üü† **BASIC MODE** - Essential features available",
            0 => "üî¥ **INITIALIZING** - Please wait for indexing to complete",
            _ => "‚ùì **UNKNOWN STATUS**",
        };

        let mut assessment = format!("{}\n", status);

        assessment.push_str(&format!(
            "üìä **System Readiness**: {}/3 systems ready\n\
            ‚Ä¢ SQLite Database: {}\n\
            ‚Ä¢ Tantivy Search: {}\n\
            ‚Ä¢ Embedding System: {}\n\n",
            systems_ready,
            if db_ready { "‚úÖ" } else { "üîÑ" },
            if search_ready { "‚úÖ" } else { "üîÑ" },
            if embeddings_ready { "‚úÖ" } else { "üîÑ" }
        ));

        assessment.push_str("üéØ **Recommended Actions**:\n");
        if !db_ready {
            assessment.push_str("‚Ä¢ Run 'manage_workspace index' to initialize database\n");
        }
        if db_ready && systems_ready < 3 {
            assessment.push_str("‚Ä¢ Background tasks are building search indexes\n");
            assessment.push_str("‚Ä¢ All features will be available shortly\n");
        }
        if systems_ready == 3 {
            assessment
                .push_str("‚Ä¢ System is fully operational - enjoy lightning-fast development!\n");
        }

        Ok(assessment)
    }

    /// Calculate directory size in bytes
    fn calculate_directory_size(path: &std::path::Path) -> Result<f64> {
        let mut total_size = 0u64;

        if path.is_dir() {
            for entry in std::fs::read_dir(path)? {
                let entry = entry?;
                let path = entry.path();
                if path.is_dir() {
                    total_size += Self::calculate_directory_size(&path)? as u64;
                } else {
                    total_size += entry.metadata()?.len();
                }
            }
        }

        Ok(total_size as f64)
    }
}
