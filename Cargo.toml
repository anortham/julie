[package]
name = "julie"
version = "0.6.1"
edition = "2021"
authors = ["Claude & Murphy"]
description = "Julie - Cross-Platform Code Intelligence Server (Rising from Miller's ashes)"
license = "MIT"

[lib]
name = "julie"
path = "src/lib.rs"

[features]
default = []
network_models = []

[[bin]]
name = "julie-server"
path = "src/main.rs"

[[bin]]
name = "julie-semantic"
path = "src/bin/semantic.rs"

[[bin]]
name = "julie-codesearch"
path = "src/bin/codesearch.rs"


[dependencies]
# MCP Server SDK
rust-mcp-sdk = { version = "0.7.0", default-features = false, features = [
    "server",
    "macros",
    "stdio",
    "2025_06_18",
] }

# Async recursion support
async-recursion = "1.1"

# Tree-sitter for parsing (latest version to match harper-dart)
# ⚠️  WARNING: DO NOT CHANGE THESE TREE-SITTER VERSIONS! ⚠️
# ⚠️  CHANGING THESE WILL BREAK EVERYTHING DUE TO API INCOMPATIBILITIES ⚠️
# ⚠️  WE SPENT HOURS GETTING THESE VERSIONS TO WORK TOGETHER ⚠️
tree-sitter = "0.25"
tree-sitter-bash = "0.23"
tree-sitter-c = "0.24"
tree-sitter-cpp = "0.23"
tree-sitter-c-sharp = "0.23"
tree-sitter-css = "0.23"
tree-sitter-go = "0.23"
tree-sitter-html = "0.23"
tree-sitter-java = "0.23"
tree-sitter-javascript = "0.23"
# ⚠️  WARNING: THESE PARSER VERSIONS ARE LOCKED TO TREE-SITTER 0.25 ⚠️
tree-sitter-kotlin-ng = "1.1.0"  # ⚠️ DO NOT CHANGE - USES MODERN API ⚠️
tree-sitter-lua = "0.2"
tree-sitter-php = "0.24"
tree-sitter-python = "0.23"
tree-sitter-ruby = "0.23"
tree-sitter-rust = "0.24"
tree-sitter-swift = "0.7"
tree-sitter-typescript = "0.23"

# Additional languages from Miller
tree-sitter-gdscript = "5.0"
# tree-sitter-qmljs = "0.2"  # Temporarily disabled due to tree-sitter version conflict
tree-sitter-regex = "0.23"
# tree-sitter-vue removed - we parse SFC sections manually
tree-sitter-razor = { git = "https://github.com/tris203/tree-sitter-razor" }
tree-sitter-powershell = { git = "https://github.com/airbus-cert/tree-sitter-powershell" }

# Missing languages from Miller
harper-tree-sitter-dart = "0.0.5"  # ⚠️ DO NOT CHANGE - REQUIRES TREE-SITTER 0.25.6+ ⚠️
tree-sitter-sequel = "0.3.10"
tree-sitter-zig = "1.1.2"

# Embeddings - Direct ONNX Runtime with GPU acceleration
# Platform-specific dependencies added below for GPU support
# fastembed = "5.2"  # REMOVED - no GPU support

# Tokenizer for BERT-based embeddings (BGE models)
# Disable esaxx_fast to avoid the C++ static CRT build on Windows debug builds.
tokenizers = { version = "0.20", default-features = false, features = ["progressbar", "onig"] }

# HuggingFace Hub for model downloading
hf-hub = { version = "0.4", features = ["tokio"] }

# HNSW for fast vector similarity search (semantic code search)
hnsw_rs = "0.3"

# N-dimensional arrays for ONNX Runtime tensors
ndarray = "0.16"

# Async runtime
tokio = { version = "1.47.1", features = ["full"] }

# Parallelism
rayon = "1.10"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
toml = "0.8"

# Database
rusqlite = { version = "0.37", features = ["bundled"] }

# File watching
notify = "8.2"

# Utilities
async-trait = "0.1"
futures = "0.3"
diff-match-patch-rs = "0.5.1"  # Google's proven diff/patch algorithm for professional editing
uuid = { version = "1.10", features = ["v4", "serde"] }
thiserror = "2.0"
anyhow = "1.0"
md5 = "0.7"
regex = "1.11"
blake3 = "1.8"
hex = "0.4"
shellexpand = "3.1"
sha2 = "0.10"

# Logging
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tracing-appender = "0.2"

# Pattern matching for file discovery
glob = "0.3"
globset = "0.4.16"  # Advanced glob matching with exclusion patterns support
chrono = { version = "0.4.42", features = ["serde"] }

# CLI-specific dependencies
clap = { version = "4.5", features = ["derive"] }
walkdir = "2.5"
num_cpus = "1.16"

[dev-dependencies]
tempfile = "3.13"
tokio-test = "0.4"
cargo-tarpaulin = "0.31"
serial_test = "3.2"

[profile.release]
opt-level = 3
debug = false
strip = true
lto = true
codegen-units = 1
panic = "abort"

[profile.dev]
opt-level = 0
debug = true

# Platform-specific ONNX Runtime dependencies for GPU acceleration
# Each platform gets optimized execution providers for maximum performance

[target.'cfg(target_os = "windows")'.dependencies]
# DirectML - Windows GPU acceleration (works with NVIDIA, AMD, Intel GPUs)
ort = { version = "2.0.0-rc.10", features = ["directml", "download-binaries", "ndarray"] }
# Windows APIs for GPU enumeration via DXGI
windows = { version = "0.58", features = ["Win32_Graphics_Dxgi", "Win32_Graphics_Direct3D12"] }

[target.'cfg(all(target_os = "linux", target_arch = "x86_64"))'.dependencies]
# CUDA - NVIDIA GPU acceleration on Linux (TensorRT disabled due to CUDA version mismatch)
ort = { version = "2.0.0-rc.10", features = ["cuda", "download-binaries", "ndarray"] }

[target.'cfg(target_os = "macos")'.dependencies]
# CoreML - Apple Silicon Neural Engine acceleration
ort = { version = "2.0.0-rc.10", features = ["coreml", "download-binaries", "ndarray"] }
